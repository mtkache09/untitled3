// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON Connect
import { STATE, CONFIG } from "./config.js"
import { telegramManager } from "./telegram.js"
import { showNotification, debugLog } from "./ui.js"

export class TonConnectManager {
  constructor() {
    this.manifestFallbacks = [
      "https://vladimiropaits.github.io/Casino/tonconnect-manifest.json",
      "https://vladimiropaits.github.io/Casino/untitled3/tonconnect-manifest.json"
    ]
  }

  async init() {
    try {
      debugLog("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TON Connect UI...")
      debugLog(`üîç TON_CONNECT_UI: ${typeof TON_CONNECT_UI !== 'undefined' ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`)

      if (typeof TON_CONNECT_UI === "undefined") {
        throw new Error("TON_CONNECT_UI –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
      }

      // –°—Ç—Ä–æ–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
      const currentPath = window.location.pathname.endsWith("/") 
        ? window.location.pathname 
        : window.location.pathname + "/"

      const localManifestUrl = window.location.origin + currentPath + "tonconnect-manifest.json"
      debugLog(`üìÑ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π Manifest URL: ${localManifestUrl}`)
      debugLog(`üåê –¢–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: ${window.location.href}`)

      // –ò—â–µ–º —Ä–∞–±–æ—á–∏–π manifest
      const manifestUrl = await this.findWorkingManifest(localManifestUrl)
      debugLog(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Manifest: ${manifestUrl}`)

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º TON Connect UI
      STATE.tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
        manifestUrl: manifestUrl,
        buttonRootId: "ton-connect-ui"
      })

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–æ—à–µ–ª—å–∫–∞
      STATE.tonConnectUI.onStatusChange((wallet) => {
        if (wallet && wallet.account) {
          debugLog(`‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${wallet.account.address}`)
          showNotification("‚úÖ TON –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω", "success", 3000)
          this.processWalletConnection(wallet)
        } else {
          STATE.walletData = null
          this.updateConnectButton(false)
          showNotification("‚ö†Ô∏è TON –∫–æ—à–µ–ª–µ–∫ –æ—Ç–∫–ª—é—á–µ–Ω", "info", 3000)
        }
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –∫–æ—à–µ–ª–µ–∫ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
      const wallet = STATE.tonConnectUI.wallet
      if (wallet && wallet.account) {
        debugLog("üîÑ –ö–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
        await this.checkExistingWallet(wallet.account.address)
      }

      debugLog("‚úÖ TON Connect UI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TON Connect:", error)
      showNotification(`‚ùå –û—à–∏–±–∫–∞ TON Connect: ${error.message}`, "error", 5000)
    }
  }

  async findWorkingManifest(localManifestUrl) {
    try {
      debugLog(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π Manifest: ${localManifestUrl}`)
      const response = await fetch(localManifestUrl)
      if (response.ok) {
        debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Manifest: ${localManifestUrl}`)
        return localManifestUrl
      }
      throw new Error(`–õ–æ–∫–∞–ª—å–Ω—ã–π Manifest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`)
    } catch (e) {
      debugLog(`‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π Manifest –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}`)
    }

    for (const fallback of this.manifestFallbacks) {
      try {
        const response = await fetch(fallback)
        if (response.ok) {
          debugLog(`‚úÖ –ù–∞–π–¥–µ–Ω fallback Manifest: ${fallback}`)
          return fallback
        }
      } catch (e) {
        debugLog(`‚ö†Ô∏è Fallback –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: ${fallback}`)
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –∫–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
    throw new Error("Manifest –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –ø–æ –æ–¥–Ω–æ–º—É –ø—É—Ç–∏")
  }

  async processWalletConnection(wallet) {
    try {
      if (!wallet.account) throw new Error("–ê–∫–∫–∞—É–Ω—Ç –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

      STATE.walletData = {
        wallet_address: wallet.account.address,
        user_id: telegramManager.getUserId(),
        network: wallet.account.chain.toString(),
        public_key: wallet.account.publicKey
      }

      if (wallet.proof) {
        debugLog("üîê TON Proof –ø–æ–ª—É—á–µ–Ω")
        STATE.walletData.proof = {
          timestamp: wallet.proof.timestamp,
          domain: {
            lengthBytes: wallet.proof.domain.lengthBytes,
            value: wallet.proof.domain.value
          },
          signature: wallet.proof.signature,
          payload: wallet.proof.payload,
          pubkey: wallet.proof.pubkey || wallet.account.publicKey
        }
      } else {
        debugLog("‚ö†Ô∏è TON Proof –Ω–µ –ø–æ–ª—É—á–µ–Ω")
      }

      this.updateConnectButton(true, wallet.account.address)
      await this.sendWalletToBackend()
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:", error)
      showNotification(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ${error.message}`, "error", 5000)
    }
  }

  updateConnectButton(connected, address = null) {
    const connectBtn = document.getElementById("connectTonWalletBtn")
    if (!connectBtn) return

    if (connected && address) {
      connectBtn.disabled = true
      connectBtn.innerHTML = `
        <svg class="w-5 h-5 mr-2 inline" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2z"></path>
          <path d="M12 6v6l4 2"></path>
        </svg>
        ‚úÖ ${address.substring(0, 6)}...${address.substring(address.length - 4)}
      `
    } else {
      connectBtn.disabled = false
      connectBtn.innerHTML = `
        <svg class="w-5 h-5 mr-2 inline" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M12 2C6.477 2 2 6.477 2 12s4.477 10 10 10 10-4.477 10-10S17.523 2 12 2z"></path>
          <path d="M12 6v6l4 2"></path>
        </svg>
        –ü–æ–¥–∫–ª—é—á–∏—Ç—å TON –ö–æ—à–µ–ª–µ–∫
      `
    }
  }

  async sendWalletToBackend() {
    if (!STATE.walletData) {
      showNotification("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏", "warning")
      return
    }

    try {
      debugLog("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
      const response = await fetch(`${CONFIG.API_BASE}/ton/connect`, {
        method: "POST",
        headers: telegramManager.getAuthHeaders(),
        body: JSON.stringify(STATE.walletData)
      })

      if (response.ok) {
        showNotification("‚úÖ TON –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", "success", 3000)
      } else {
        const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
        if (errorData.detail && (errorData.detail.includes("—É–∂–µ") || errorData.detail.includes("already"))) {
          showNotification("‚úÖ TON –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "success", 3000)
        } else {
          showNotification(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ${errorData.detail}`, "error", 5000)
        }
      }
    } catch (error) {
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ—à–µ–ª—å–∫–∞", "error", 5000)
    }
  }

  async checkExistingWallet(walletAddress) {
    try {
      const response = await fetch(`${CONFIG.API_BASE}/ton/wallets`, {
        method: "GET",
        headers: telegramManager.getAuthHeaders()
      })

      if (response.ok) {
        const wallets = await response.json()
        const existingWallet = wallets.find((w) => w.wallet_address === walletAddress)

        if (existingWallet) {
          this.updateConnectButton(true, walletAddress)
          STATE.walletData = {
            wallet_address: walletAddress,
            user_id: telegramManager.getUserId(),
            network: "-239",
            public_key: null
          }
          showNotification("‚úÖ TON –∫–æ—à–µ–ª–µ–∫ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω", "success", 3000)
          return true
        }
      }
      return false
    } catch (error) {
      return false
    }
  }
}

export const tonConnectManager = new TonConnectManager()
