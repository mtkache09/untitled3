// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
import { CONFIG, STATE } from "./config.js"
import { telegramManager } from "./telegram.js"
import { apiManager } from "./api.js"
import { showNotification, updateFanticsDisplay } from "./ui.js"

export class PaymentManager {
  constructor() {
    this.setupEventListeners()
  }

  setupEventListeners() {
    // Deposit modal
    document.getElementById("depositBtn")?.addEventListener("click", () => this.openTopupModal())
    document.getElementById("closeDepositModal")?.addEventListener("click", () => this.closeDepositModal())
    document.getElementById("confirmDepositBtn")?.addEventListener("click", () => this.processDeposit())
    document.getElementById("customAmount")?.addEventListener("input", () => this.updateDepositButton())

    // Topup modal
    document.getElementById("closeTopupModal")?.addEventListener("click", () => this.closeTopupModal())
    document.getElementById("createTopupPayload")?.addEventListener("click", () => this.createTopupPayload())
    document.getElementById("sendTonTransaction")?.addEventListener("click", () => this.sendTonTransaction())
    document.getElementById("payWithStars")?.addEventListener("click", () => this.payWithStars())

    // Payment method change
    document.querySelectorAll('input[name="paymentMethod"]')?.forEach((radio) => {
      radio.addEventListener("change", () => this.updatePaymentMethodUI())
    })

    // Modal close on outside click
    document.getElementById("depositModal")?.addEventListener("click", (e) => {
      if (e.target.id === "depositModal") this.closeDepositModal()
    })

    document.getElementById("topupModal")?.addEventListener("click", (e) => {
      if (e.target.id === "topupModal") this.closeTopupModal()
    })
  }

  // Deposit Modal Methods
  openDepositModal() {
    document.getElementById("depositModal")?.classList.remove("hidden")
    document.getElementById("modalUserStars").textContent = STATE.userFantics
    this.renderDepositAmounts()
    this.updateDepositButton()
  }

  closeDepositModal() {
    document.getElementById("depositModal")?.classList.add("hidden")
    STATE.selectedDepositAmount = null
    const customAmount = document.getElementById("customAmount")
    if (customAmount) customAmount.value = ""

    document.querySelectorAll("#depositAmounts > div").forEach((el) => {
      el.classList.remove("selected-amount", "ring-2", "ring-purple-400")
    })
  }

  renderDepositAmounts() {
    const depositAmounts = document.getElementById("depositAmounts")
    if (!depositAmounts) return

    depositAmounts.innerHTML = ""

    CONFIG.DEPOSIT_AMOUNTS.forEach((amount) => {
      const amountElement = document.createElement("div")
      amountElement.className =
        "bg-gradient-to-br from-purple-600 to-purple-800 rounded-lg p-4 text-white text-center cursor-pointer hover:from-purple-700 hover:to-purple-900 transition-all border border-purple-500/30"

      amountElement.innerHTML = `
        <div class="text-2xl mb-1">üíé</div>
        <div class="font-bold text-lg">${amount}</div>
        <div class="text-xs text-purple-300">–§–∞–Ω—Ç–∏–∫–æ–≤</div>
      `

      amountElement.addEventListener("click", (event) => this.selectDepositAmount(amount, event))
      depositAmounts.appendChild(amountElement)
    })
  }

  selectDepositAmount(amount, event) {
    STATE.selectedDepositAmount = amount

    document.querySelectorAll("#depositAmounts > div").forEach((el) => {
      el.classList.remove("selected-amount", "ring-2", "ring-purple-400")
    })

    if (event.target.closest("div")) {
      event.target.closest("div").classList.add("selected-amount", "ring-2", "ring-purple-400")
    }

    this.updateDepositButton()
  }

  updateDepositButton() {
    const confirmBtn = document.getElementById("confirmDepositBtn")
    const depositBtnText = document.getElementById("depositBtnText")
    const customAmount = document.getElementById("customAmount")

    if (!confirmBtn || !depositBtnText) return

    const amount = STATE.selectedDepositAmount || (customAmount ? parseInt(customAmount.value) || 0 : 0)

    if (amount > 0) {
      confirmBtn.disabled = false
      depositBtnText.textContent = `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${amount} üíé`
    } else {
      confirmBtn.disabled = true
      depositBtnText.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É"
    }
  }

  async processDeposit() {
    const amount =
      STATE.selectedDepositAmount ||
      (document.getElementById("customAmount")
        ? parseInt(document.getElementById("customAmount").value) || 0
        : 0)

    if (amount <= 0) {
      showNotification("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "warning")
      return
    }

    const success = await apiManager.addFantics(amount)
    if (success) {
      showNotification(`‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤!`, "success")
      updateFanticsDisplay()
      this.closeDepositModal()
    }
  }

  // Topup Modal Methods
  openTopupModal() {
    document.getElementById("topupModal")?.classList.remove("hidden")
    document.getElementById("topupAmount").value = "10"
    this.resetTopupModal()
  }

  closeTopupModal() {
    document.getElementById("topupModal")?.classList.add("hidden")
    STATE.topupPayload = null
    STATE.currentPaymentId = null
  }

  resetTopupModal() {
    document.getElementById("tonPaymentInfo")?.classList.add("hidden")
    document.getElementById("starsPaymentInfo")?.classList.add("hidden")
    document.getElementById("createTopupPayload")?.classList.remove("hidden")
    document.getElementById("sendTonTransaction")?.classList.add("hidden")
    document.getElementById("payWithStars")?.classList.add("hidden")

    this.updatePaymentMethodUI()
    STATE.topupPayload = null
    STATE.currentPaymentId = null
  }

  updatePaymentMethodUI() {
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value
    const createButton = document.getElementById("createTopupPayload")
    const createButtonText = document.getElementById("createPayloadText")

    if (!createButton || !createButtonText) return

    if (paymentMethod === "telegram_stars") {
      createButtonText.textContent = "‚≠ê –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏"
      createButton.className = "flex-1 bg-yellow-600 hover:bg-yellow-700 text-white font-semibold py-2 px-4 rounded"
    } else {
      createButtonText.textContent = "–°–æ–∑–¥–∞—Ç—å TON –ø–ª–∞—Ç–µ–∂"
      createButton.className = "flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded"
    }

    document.getElementById("tonPaymentInfo")?.classList.add("hidden")
    document.getElementById("starsPaymentInfo")?.classList.add("hidden")
    document.getElementById("sendTonTransaction")?.classList.add("hidden")
    document.getElementById("payWithStars")?.classList.add("hidden")
    document.getElementById("createTopupPayload")?.classList.remove("hidden")
  }

  async createTopupPayload() {
    const amount = parseInt(document.getElementById("topupAmount")?.value || "0")
    const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked')?.value

    if (!amount || amount < 1) {
      showNotification("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1 —Ñ–∞–Ω—Ç–∏–∫", "error")
      return
    }

    if (paymentMethod === "telegram_stars") {
      await this.processStarsPayment(amount)
      return
    }

    try {
      const response = await fetch(`${CONFIG.API_BASE}/topup/ton/create_payload`, {
        method: "POST",
        headers: telegramManager.getAuthHeaders(),
        body: JSON.stringify({ amount: amount }),
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      STATE.topupPayload = await response.json()
      STATE.currentPaymentId = STATE.topupPayload.payment_id  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞

      document.getElementById("tonAmount").textContent = STATE.topupPayload.amount
      document.getElementById("destinationAddress").textContent = STATE.topupPayload.destination
      document.getElementById("paymentComment").textContent = STATE.topupPayload.comment
      document.getElementById("tonPaymentInfo")?.classList.remove("hidden")
      document.getElementById("starsPaymentInfo")?.classList.add("hidden")
      document.getElementById("createTopupPayload")?.classList.add("hidden")
      document.getElementById("sendTonTransaction")?.classList.remove("hidden")
      document.getElementById("payWithStars")?.classList.add("hidden")

      showNotification(`TON –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω! ID: ${STATE.currentPaymentId.slice(0, 8)}...`, "success")
    } catch (error) {
      showNotification("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è TON –ø–ª–∞—Ç–µ–∂–∞: " + error.message, "error")
    }
  }

  async processStarsPayment(amount) {
    try {
      document.getElementById("starsAmount").textContent = amount
      document.getElementById("starsPaymentInfo")?.classList.remove("hidden")
      document.getElementById("tonPaymentInfo")?.classList.add("hidden")
      document.getElementById("createTopupPayload")?.classList.add("hidden")
      document.getElementById("sendTonTransaction")?.classList.add("hidden")
      document.getElementById("payWithStars")?.classList.remove("hidden")

      showNotification("–ì–æ—Ç–æ–≤ –∫ –æ–ø–ª–∞—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", "info")
    } catch (error) {
      showNotification("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –æ–ø–ª–∞—Ç—ã –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏: " + error.message, "error")
    }
  }

  async sendTonTransaction() {
    if (!STATE.tonConnectUI || !STATE.topupPayload) {
      showNotification("TON Connect –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ payload –Ω–µ —Å–æ–∑–¥–∞–Ω", "error")
      return
    }

    const wallet = STATE.tonConnectUI.wallet
    if (!wallet || !wallet.account) {
      showNotification("–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ TON –∫–æ—à–µ–ª–µ–∫", "error")
      return
    }

    try {
      const transaction = {
        validUntil: Math.floor(Date.now() / 1000) + 600,
        messages: [
          {
            address: STATE.topupPayload.destination,
            amount: (STATE.topupPayload.amount * 1000000000).toString(),
          },
        ],
      }

      showNotification(`üí∞ –û—Ç–ø—Ä–∞–≤–∫–∞ ${STATE.topupPayload.amount} TON`, "info", 2000)

      const result = await STATE.tonConnectUI.sendTransaction(transaction)

      if (result) {
        showNotification("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...", "success")
        
        // –ü–æ–ª—É—á–∞–µ–º —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const transactionHash = result.boc ? await this.getTransactionHash(result.boc) : null
        
        if (transactionHash) {
          // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
          await this.confirmTopupWithVerification(transactionHash)
        } else {
          showNotification("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ö—ç—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "error")
        }
      } else {
        showNotification("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", "error")
      }
    } catch (error) {
      if (error.message.includes("User rejected") || error.message.includes("cancelled")) {
        showNotification("‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning")
      } else {
        showNotification(`‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${error.message}`, "error", 5000)
      }
    }
  }

  async payWithStars() {
    const amount = parseInt(document.getElementById("topupAmount")?.value || "0")

    try {
      const response = await fetch(`${CONFIG.API_BASE}/topup/stars`, {
        method: "POST",
        headers: telegramManager.getAuthHeaders(),
        body: JSON.stringify({ amount: amount }),
      })

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`)
      }

      const result = await response.json()

      if (result.success) {
        showNotification(
          "‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ",
          "success",
          7000,
        )
        this.closeTopupModal()
      } else {
        showNotification("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–≤–µ–∑–¥–æ—á–∫–∏", "error")
      }
    } catch (error) {
      showNotification("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–≤–µ–∑–¥–æ—á–µ–∫: " + error.message, "error")
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ BOC (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  async getTransactionHash(boc) {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å TON BOC
      // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É - –≤ production –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ton-core –∏–ª–∏ –∞–Ω–∞–ª–æ–≥
      
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –±–∞–π—Ç—ã BOC –∫–∞–∫ —Ö—ç—à
      const bocBytes = new Uint8Array(atob(boc).split('').map(c => c.charCodeAt(0)))
      const hashHex = Array.from(bocBytes.slice(0, 32)).map(b => b.toString(16).padStart(2, '0')).join('')
      
      return hashHex
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö—ç—à–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error)
      return null
    }
  }

  async confirmTopupWithVerification(transactionHash) {
    if (!STATE.currentPaymentId) {
      showNotification('–û—à–∏–±–∫–∞: ID –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error')
      return
    }
    
    try {
      showNotification('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–ª–æ–∫—á–µ–π–Ω–µ...', 'info')
      
      const response = await fetch(`${CONFIG.API_BASE}/topup/ton/confirm`, {
        method: 'POST',
        headers: telegramManager.getAuthHeaders(),
        body: JSON.stringify({
          payment_id: STATE.currentPaymentId,
          transaction_hash: transactionHash
        })
      })
      
      const result = await response.json()
      
      if (response.ok && result.success) {
        showNotification(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! +${result.added_amount} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`, 'success')
        this.closeTopupModal()
        await apiManager.fetchUserFantics()
        updateFanticsDisplay()
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        STATE.currentPaymentId = null
        STATE.topupPayload = null
        
      } else {
        const errorMessage = result.detail || result.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'
        
        if (errorMessage.includes('–Ω–µ –Ω–∞–π–¥–µ–Ω–∞') || errorMessage.includes('–Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')) {
          showNotification(`‚è≥ ${errorMessage}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥`, 'warning')
          
          // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
          setTimeout(() => this.checkPaymentStatus(), 5000)
        } else {
          showNotification(`‚ùå ${errorMessage}`, 'error')
        }
      }
      
    } catch (error) {
      showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ' + error.message, 'error')
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
      setTimeout(() => this.checkPaymentStatus(), 10000)
    }
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async checkPaymentStatus() {
    if (!STATE.currentPaymentId) return
    
    try {
      const response = await fetch(`${CONFIG.API_BASE}/payment/status/${STATE.currentPaymentId}`, {
        headers: telegramManager.getAuthHeaders()
      })
      
      if (!response.ok) return
      
      const payment = await response.json()
      
      if (payment.status === 'confirmed') {
        showNotification(`‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! +${payment.amount_fantics} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`, 'success')
        this.closeTopupModal()
        await apiManager.fetchUserFantics()
        updateFanticsDisplay()
        STATE.currentPaymentId = null
        STATE.topupPayload = null
              } else if (payment.status === 'failed') {
          showNotification('‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É', 'error')
          STATE.currentPaymentId = null
          STATE.topupPayload = null
        } else if (payment.status === 'expired') {
        showNotification('‚è∞ –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ', 'warning')
        STATE.currentPaymentId = null
        STATE.topupPayload = null
      } else {
        // –°—Ç–∞—Ç—É—Å pending - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å
        setTimeout(() => this.checkPaymentStatus(), 10000)
      }
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error)
      setTimeout(() => this.checkPaymentStatus(), 15000)
    }
  }


}

export const paymentManager = new PaymentManager()
