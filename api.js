// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
import { CONFIG, STATE } from "./config.js"
import { telegramManager } from "./telegram.js"
import { showNotification } from "./ui.js"

export class ApiManager {
  constructor() {
    this.baseUrl = CONFIG.API_BASE
  }

  handleApiError(response, error) {
    switch (response?.status) {
      case 401:
        showNotification("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram", "error", 8000)
        console.error("401 Unauthorized:", error)
        if (error?.detail) {
          console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error.detail)
        }
        break
      case 403:
        showNotification("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", "error", 5000)
        console.error("403 Forbidden:", error)
        break
      case 404:
        showNotification("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error", 5000)
        console.error("404 Not Found:", error)
        break
      case 500:
        showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "error", 5000)
        console.error("500 Internal Server Error:", error)
        break
      default:
        showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error?.detail || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`, "error", 5000)
        console.error("API Error:", response?.status, error)
    }
  }

  async fetchUserFantics() {
    try {
      console.log("üîÑ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

      const userId = telegramManager.getUserId()
      const response = await fetch(`${this.baseUrl}/fantics/${userId}`, {
        headers: telegramManager.getAuthHeaders(),
      })

      if (response.ok) {
        const data = await response.json()
        STATE.userFantics = data.fantics || 0
        console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:", STATE.userFantics)
        return STATE.userFantics
      } else {
        const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", response.status, errorData)
        this.handleApiError(response, errorData)
        return null
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", "error", 5000)
      return null
    }
  }

  async fetchCases() {
    try {
      console.log("üîÑ –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –∫–µ–π—Å–æ–≤...")

      const response = await fetch(`${this.baseUrl}/cases`, {
        headers: telegramManager.getAuthHeaders(),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ –ö–µ–π—Å—ã –ø–æ–ª—É—á–µ–Ω—ã:", data)
        return data
      } else {
        const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:", response.status, errorData)
        this.handleApiError(response, errorData)
        return null
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–µ–π—Å–æ–≤", "error", 5000)
      return null
    }
  }

  async openCaseAPI(caseId) {
    try {
      console.log("üîÑ –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞:", caseId)

      const response = await fetch(`${this.baseUrl}/open_case/${caseId}`, {
        method: "POST",
        headers: telegramManager.getAuthHeaders(),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç:", data)

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        STATE.userFantics = (STATE.userFantics || 0) - data.spent + data.gift
        return data
      } else {
        const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:", response.status, errorData)
        this.handleApiError(response, errorData)
        return null
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞", "error", 5000)
      return null
    }
  }

  async addFantics(amount) {
    try {
      console.log("üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–Ω—Ç–∏–∫–æ–≤:", amount)

      const userId = telegramManager.getUserId()
      const response = await fetch(`${this.baseUrl}/fantics/add`, {
        method: "POST",
        headers: telegramManager.getAuthHeaders(),
        body: JSON.stringify({ user_id: userId, amount }),
      })

      if (response.ok) {
        const data = await response.json()
        if (data.fantics !== undefined) {
          STATE.userFantics = data.fantics
        } else {
          STATE.userFantics = (STATE.userFantics || 0) + amount
        }
        console.log("‚úÖ –§–∞–Ω—Ç–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã:", STATE.userFantics)
        return true
      } else {
        const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
        console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–Ω—Ç–∏–∫–æ–≤:", response.status, errorData)
        this.handleApiError(response, errorData)
        return false
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–Ω—Ç–∏–∫–æ–≤", "error", 5000)
      return false
    }
  }

  async testConnection() {
    try {
      console.log("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º...")

      const response = await fetch(`${this.baseUrl}/`, {
        headers: telegramManager.getAuthHeaders(),
      })

      if (response.ok) {
        const data = await response.json()
        console.log("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", data)
        return true
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º:", response.status)
        return false
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", error)
      return false
    }
  }
}

export const apiManager = new ApiManager()
