const API_BASE = (() => {
  if (window.location.hostname === "mtkache09.github.io") {
    return "https://telegramcases-production.up.railway.app"
  }
  return "http://localhost:8000"
})()

const tg = window.Telegram?.WebApp

console.log("=== TELEGRAM WEB APP DEBUG ===")
console.log("Telegram WebApp –¥–æ—Å—Ç—É–ø–µ–Ω:", !!tg)
if (tg) {
  console.log("Init Data:", tg.initData)
  console.log("Init Data Unsafe:", tg.initDataUnsafe)
  console.log("User:", tg.initDataUnsafe?.user)
  console.log("Platform:", tg.platform)
  console.log("Version:", tg.version)
}

if (tg) {
  tg.ready()
  tg.expand()
  tg.MainButton.hide()
  tg.setHeaderColor("#1a1a2e")
  tg.setBackgroundColor("#16213e")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
function getAuthHeaders() {
  const headers = {
    Accept: "application/json",
    "Content-Type": "application/json",
  }

  // –ü–æ–ª—É—á–∞–µ–º initData –∏–∑ Telegram WebApp
  let initData = null

  if (window.Telegram?.WebApp?.initData) {
    initData = window.Telegram.WebApp.initData
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram WebApp initData")
    console.log("üì± Init Data –¥–ª–∏–Ω–∞:", initData.length)
  } else if (window.location.search.includes("initData=")) {
    // –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å initData —á–µ—Ä–µ–∑ URL
    const urlParams = new URLSearchParams(window.location.search)
    initData = urlParams.get("initData")
    console.log("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º initData –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
  }

  if (initData) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: Authorization: Bearer <initData>
    headers["Authorization"] = `Bearer ${initData}`
    console.log("üîê –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
  } else {
    console.warn("‚ö†Ô∏è Telegram WebApp initData –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
  }

  return headers
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function isAuthAvailable() {
  return !!window.Telegram?.WebApp?.initData || window.location.search.includes("initData=")
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è User ID
const getUserId = () => {
  if (tg?.initDataUnsafe?.user?.id) {
    const userId = tg.initDataUnsafe.user.id
    console.log("‚úÖ Telegram User ID:", userId)
    return userId
  }

  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (window.location.search.includes("user_id=")) {
    const urlParams = new URLSearchParams(window.location.search)
    const userId = Number.parseInt(urlParams.get("user_id"))
    if (userId) {
      console.log("‚úÖ User ID –∏–∑ URL:", userId)
      return userId
    }
  }

  console.warn("‚ö†Ô∏è Telegram User ID –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π: 123456")
  return 123456
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
function handleApiError(response, error) {
  switch (response?.status) {
    case 401:
      showNotification("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram", "error", 8000)
      console.error("401 Unauthorized:", error)
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (error?.detail) {
        console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:", error.detail)
      }
      break
    case 403:
      showNotification("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º", "error", 5000)
      console.error("403 Forbidden:", error)
      break
    case 404:
      showNotification("‚ùå –†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
      console.error("404 Not Found:", error)
      break
    case 400:
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
      const message = error?.detail || "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
      showNotification(`‚ùå ${message}`, "error", 5000)
      console.error("400 Bad Request:", error)
      break
    case 500:
      showNotification("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ", "error")
      console.error("500 Server Error:", error)
      break
    default:
      showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error?.detail || error?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`, "error")
      console.error("API Error:", error)
  }
}

let userFantics = 0
let cases = []
let currentCase = null
let isSpinning = false
let selectedDepositAmount = null

const depositAmounts = [
  { amount: 1000, bonus: 0, popular: false },
  { amount: 2500, bonus: 250, popular: false },
  { amount: 5000, bonus: 750, popular: true },
  { amount: 10000, bonus: 2000, popular: false },
  { amount: 25000, bonus: 5000, popular: false },
  { amount: 50000, bonus: 15000, popular: false },
]

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫—Ä–∞—Å–∏–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤–º–µ—Å—Ç–æ alert
function showNotification(message, type = "info", duration = 3000) {
  // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const existingNotifications = document.querySelectorAll(".notification")
  existingNotifications.forEach((notification) => {
    notification.remove()
  })

  const notification = document.createElement("div")
  notification.className = `notification ${type}`
  notification.textContent = message

  document.body.appendChild(notification)

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  setTimeout(() => {
    notification.classList.add("hide")
    setTimeout(() => {
      if (notification.parentNode) {
        notification.remove()
      }
    }, 300)
  }, duration)
}

function showConnectionStatus(message, isError = false) {
  const statusDiv = document.getElementById("connectionStatus")
  const statusText = document.getElementById("statusText")

  statusText.textContent = message
  statusDiv.className = `mb-4 p-3 rounded-lg text-center text-sm font-medium ${
    isError
      ? "bg-red-900/50 text-red-300 border border-red-700/50"
      : "bg-blue-900/50 text-blue-300 border border-blue-700/50"
  }`
  statusDiv.classList.remove("hidden")

  if (!isError) {
    setTimeout(() => {
      statusDiv.classList.add("hidden")
    }, 3000)
  }
}

async function fetchUserFantics() {
  try {
    const userId = getUserId()
    const url = `${API_BASE}/fantics/${userId}`

    console.log("üì° –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞:")
    console.log("   URL:", url)
    console.log("   User ID:", userId)
    console.log("   API Base:", API_BASE)
    console.log("   –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞:", isAuthAvailable())

    showConnectionStatus("–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")

    const response = await fetch(url, {
      method: "GET",
      headers: getAuthHeaders(),
      mode: "cors",
    })

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText)

    if (response.ok) {
      const data = await response.json()
      console.log("üì° –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã:", data)
      userFantics = data.fantics
      updateFanticsDisplay()
      console.log("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω:", userFantics)
      showConnectionStatus("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω")
    } else {
      const errorData = await response.json().catch(() => ({ detail: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }))
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", response.status, errorData)
      handleApiError(response, errorData)
      showConnectionStatus("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞", true)
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ API:", error)
    console.error("   –¢–∏–ø –æ—à–∏–±–∫–∏:", error.name)
    console.error("   –°–æ–æ–±—â–µ–Ω–∏–µ:", error.message)

    if (!isAuthAvailable()) {
      showConnectionStatus("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram", true)
      showNotification("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ Telegram", "error", 8000)
    } else {
      showConnectionStatus("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", true)
    }

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å
    userFantics = 0
    updateFanticsDisplay()
  }
}

async function fetchCases() {
  try {
    const url = `${API_BASE}/cases`
    console.log("üì° –ó–∞–ø—Ä–æ—Å –∫–µ–π—Å–æ–≤:", url)
    showConnectionStatus("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤...")

    const response = await fetch(url, {
      method: "GET",
      headers: getAuthHeaders(),
      mode: "cors",
    })

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∫–µ–π—Å—ã):", response.status)

    if (response.ok) {
      const rawCases = await response.json()
      console.log("üì° –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–µ–π—Å–æ–≤:", rawCases)

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å—Ç–∞—Ä—ã–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      cases = rawCases.map((caseData) => ({
        ...caseData,
        possible_rewards: caseData.presents.map((present) => ({
          cost: present.cost,
          probability: present.probability,
        })),
      }))

      console.log("üì° –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–µ–π—Å—ã:", cases)
      renderCases()
      console.log("‚úÖ –ö–µ–π—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", cases.length)
      showConnectionStatus(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${cases.length} –∫–µ–π—Å–æ–≤`)
    } else {
      const errorData = await response.json().catch(() => ({ detail: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤" }))
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:", response.status, errorData)
      handleApiError(response, errorData)
      showConnectionStatus("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤", true)
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤
      cases = []
      renderCases()
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤:", error)
    showConnectionStatus("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", true)
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤
    cases = []
    renderCases()
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
async function testConnection() {
  console.log("=== –¢–ï–°–¢ –°–û–ï–î–ò–ù–ï–ù–ò–Ø –ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===")
  console.log("API Base:", API_BASE)
  console.log("User ID:", getUserId())
  console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞:", isAuthAvailable())
  console.log("Init Data:", window.Telegram?.WebApp?.initData ? "–ï—Å—Ç—å" : "–ù–µ—Ç")

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  const headers = getAuthHeaders()
  console.log("–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", headers)

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log("üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ /")
    const response1 = await fetch(`${API_BASE}/`)
    const data1 = await response1.json()
    console.log("‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π API:", data1)

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ fantics (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log("üì° –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ /fantics/")
    const userId = getUserId()
    const response2 = await fetch(`${API_BASE}/fantics/${userId}`, {
      headers: getAuthHeaders(),
    })

    if (response2.ok) {
      const data2 = await response2.json()
      console.log("‚úÖ Fantics endpoint:", data2)
    } else {
      const error2 = await response2.json()
      console.log("‚ùå Fantics endpoint error:", response2.status, error2)
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ–π—Å–æ–≤ (–º–æ–∂–µ—Ç –Ω–µ —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    console.log("üì° –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ /cases")
    const response3 = await fetch(`${API_BASE}/cases`, {
      headers: getAuthHeaders(),
    })

    if (response3.ok) {
      const data3 = await response3.json()
      console.log("‚úÖ Cases endpoint:", data3.length, "–∫–µ–π—Å–æ–≤")
    } else {
      const error3 = await response3.json()
      console.log("‚ùå Cases endpoint error:", response3.status, error3)
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", error)
  }
}

async function openCaseAPI(caseId) {
  try {
    const userId = getUserId()
    const url = `${API_BASE}/open_case/${caseId}`

    console.log("üì° –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞:", url)
    console.log("   User ID:", userId)
    console.log("   Case ID:", caseId)
    showConnectionStatus("–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞...")

    const response = await fetch(url, {
      method: "POST",
      headers: getAuthHeaders(),
      // –£–±–∏—Ä–∞–µ–º body - user_id –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      mode: "cors",
    })

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞):", response.status)

    if (response.ok) {
      const result = await response.json()
      console.log("‚úÖ –ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç:", result)
      showConnectionStatus("–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!")
      return result
    } else {
      const errorData = await response.json().catch(() => ({ detail: "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞" }))
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:", response.status, errorData)
      handleApiError(response, errorData)
      throw new Error(errorData.detail || "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞")
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:", error)
    showConnectionStatus(`–û—à–∏–±–∫–∞: ${error.message}`, true)
    throw error
  }
}

async function addFantics(amount) {
  try {
    const userId = getUserId()
    console.log("üì° –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:", amount, "–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", userId)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –¥–µ–Ω—å–≥–∞–º–∏
    if (!isAuthAvailable()) {
      throw new Error("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ Telegram WebApp")
    }

    showConnectionStatus("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...")

    const response = await fetch(`${API_BASE}/fantics/add`, {
      method: "POST",
      headers: getAuthHeaders(),
      body: JSON.stringify({
        amount: amount,
        // –£–±–∏—Ä–∞–µ–º user_id - –æ–Ω –¥–æ–ª–∂–µ–Ω –±—Ä–∞—Ç—å—Å—è –∏–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }),
      mode: "cors",
    })

    console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ):", response.status)

    if (response.ok) {
      const result = await response.json()
      console.log("‚úÖ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:", result)
      showConnectionStatus("–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è...")

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ (RabbitMQ –∏–ª–∏ –ø—Ä—è–º—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)
      const delay = API_BASE.includes("localhost") ? 1000 : 3000
      setTimeout(() => {
        fetchUserFantics()
      }, delay)
      return true
    } else {
      const errorData = await response.json().catch(() => ({ detail: "–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" }))
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", response.status, errorData)
      handleApiError(response, errorData)
      return false
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", error)
    showConnectionStatus("–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", true)
    showNotification(`‚ùå ${error.message}`, "error")
    return false
  }
}

function updateFanticsDisplay() {
  document.getElementById("userStars").textContent = userFantics.toLocaleString()
  document.getElementById("userStarsCase").textContent = userFantics.toLocaleString()
  document.getElementById("modalUserStars").textContent = userFantics.toLocaleString()
}

function updateOpenButton() {
  const demoMode = document.getElementById("demoMode").checked
  const openBtnText = document.getElementById("openBtnText")

  if (demoMode) {
    openBtnText.textContent = "–û—Ç–∫—Ä—ã—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ"
    document.getElementById("openCaseBtn").className =
      "w-full h-14 bg-gradient-to-r from-green-600 to-green-800 hover:from-green-700 hover:to-green-900 text-white font-bold text-lg shadow-lg rounded-lg transition-all mb-8"
  } else {
    openBtnText.textContent = `–û—Ç–∫—Ä—ã—Ç—å –∑–∞ ${currentCase.cost} üíé`
    document.getElementById("openCaseBtn").className =
      "w-full h-14 bg-gradient-to-r from-purple-600 to-purple-800 hover:from-purple-700 hover:to-purple-900 text-white font-bold text-lg shadow-lg rounded-lg transition-all mb-8"
  }
}

function renderCases() {
  const casesGrid = document.getElementById("casesGrid")
  casesGrid.innerHTML = ""

  if (cases.length === 0) {
    casesGrid.innerHTML = '<div class="col-span-2 text-center text-gray-400 py-8">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–µ–π—Å–æ–≤</div>'
    return
  }

  cases.forEach((caseItem) => {
    const canAfford = userFantics >= caseItem.cost

    const caseElement = document.createElement("div")
    caseElement.className = `cursor-pointer transition-all duration-300 hover-scale bg-gray-900/50 backdrop-blur-sm border border-gray-700/50 rounded-lg p-4 text-center ${
      canAfford
        ? "hover:shadow-xl hover:shadow-purple-500/20 hover:border-purple-500/50"
        : "opacity-50 cursor-not-allowed"
    }`

    const icons = {
      1: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M20 7h-9a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h7a2 2 0 0 1 2 2z"></path></svg>`,
      2: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M6 9H4.5a2.5 2.5 0 0 1 0-5H6"></path></svg>`,
      3: `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M6 3h12l4 6-10 13L2 9z"></path></svg>`,
    }

    const colors = {
      1: "bg-gradient-to-br from-gray-600 to-gray-800",
      2: "bg-gradient-to-br from-purple-400 to-purple-600",
      3: "bg-gradient-to-br from-purple-600 to-purple-800",
    }

    caseElement.innerHTML = `
          <div class="w-16 h-16 rounded-xl ${colors[caseItem.id] || colors[1]} flex items-center justify-center mb-3 mx-auto shadow-lg border border-white/10">
              <div class="w-8 h-8 text-white">${icons[caseItem.id] || icons[1]}</div>
          </div>
          <h3 class="font-semibold text-white text-sm mb-2 leading-tight">${caseItem.name}</h3>
          <div class="flex items-center justify-center gap-1">
              <span class="text-purple-400">üíé</span>
              <span class="font-bold text-sm ${canAfford ? "text-gray-200" : "text-gray-500"}">${caseItem.cost.toLocaleString()}</span>
          </div>
          ${!canAfford ? '<div class="mt-2"><span class="text-xs text-red-400 font-medium">–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤</span></div>' : ""}
      `

    if (canAfford) {
      caseElement.addEventListener("click", () => openCasePage(caseItem))
    }

    casesGrid.appendChild(caseElement)
  })
}

function renderDepositAmounts() {
  const depositAmountsContainer = document.getElementById("depositAmounts")
  depositAmountsContainer.innerHTML = ""

  depositAmounts.forEach((item) => {
    const amountElement = document.createElement("div")
    amountElement.className = `cursor-pointer transition-all duration-300 bg-gray-800/50 backdrop-blur-sm border border-gray-700/50 rounded-lg p-4 text-center hover:border-purple-500/50 hover:bg-gray-700/50 ${
      item.popular ? "ring-2 ring-purple-500 bg-purple-900/20" : ""
    }`

    const totalAmount = item.amount + item.bonus

    amountElement.innerHTML = `
          ${item.popular ? '<div class="bg-purple-600 text-white text-xs font-bold px-2 py-1 rounded-full mb-2 inline-block">–ü–û–ü–£–õ–Ø–†–ù–û</div>' : ""}
          <div class="text-white font-bold text-lg">${item.amount} üíé</div>
          ${item.bonus > 0 ? `<div class="text-purple-400 text-sm">+${item.bonus} –±–æ–Ω—É—Å</div>` : ""}
          ${item.bonus > 0 ? `<div class="text-gray-400 text-xs">–ò—Ç–æ–≥–æ: ${totalAmount} üíé</div>` : ""}
      `

    amountElement.addEventListener("click", (e) => selectDepositAmount(item, e))
    depositAmountsContainer.appendChild(amountElement)
  })
}

function selectDepositAmount(item, event) {
  selectedDepositAmount = item
  updateDepositButton()

  document.querySelectorAll("#depositAmounts > div").forEach((el) => {
    el.classList.remove("selected-amount", "ring-2", "ring-purple-400")
  })

  if (event && event.target) {
    event.target.closest("div").classList.add("selected-amount", "ring-2", "ring-purple-400")
  }

  document.getElementById("customAmount").value = ""
}

function updateDepositButton() {
  const confirmBtn = document.getElementById("confirmDepositBtn")
  const btnText = document.getElementById("depositBtnText")
  const customAmount = document.getElementById("customAmount").value

  if (selectedDepositAmount) {
    const totalAmount = selectedDepositAmount.amount + selectedDepositAmount.bonus
    btnText.textContent = `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${totalAmount} üíé`
    confirmBtn.disabled = false
  } else if (customAmount && customAmount > 0) {
    btnText.textContent = `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –Ω–∞ ${customAmount} üíé`
    confirmBtn.disabled = false
  } else {
    btnText.textContent = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É"
    confirmBtn.disabled = true
  }
}

function openDepositModal() {
  document.getElementById("depositModal").classList.remove("hidden")
  renderDepositAmounts()
  updateFanticsDisplay()
}

function closeDepositModal() {
  document.getElementById("depositModal").classList.add("hidden")
  selectedDepositAmount = null
  document.getElementById("customAmount").value = ""
  updateDepositButton()
}

async function processDeposit() {
  let amountToDeposit = 0

  if (selectedDepositAmount) {
    amountToDeposit = selectedDepositAmount.amount + selectedDepositAmount.bonus
  } else {
    const customAmount = Number.parseInt(document.getElementById("customAmount").value)
    if (customAmount && customAmount > 0) {
      amountToDeposit = customAmount
    }
  }

  if (amountToDeposit <= 0) {
    showNotification("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "error")
    return
  }

  const confirmBtn = document.getElementById("confirmDepositBtn")
  const originalText = confirmBtn.innerHTML
  confirmBtn.innerHTML = '<span class="animate-pulse">–ü–æ–ø–æ–ª–Ω—è–µ–º...</span>'
  confirmBtn.disabled = true

  try {
    const success = await addFantics(amountToDeposit)

    if (success) {
      showNotification(`‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.`, "success", 4000)
      closeDepositModal()
      renderCases()
    } else {
      showNotification("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", "error")
    }
  } catch (error) {
    showNotification("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞", "error")
  } finally {
    confirmBtn.innerHTML = originalText
    confirmBtn.disabled = false
  }
}

function openCasePage(caseData) {
  currentCase = caseData
  document.getElementById("mainPage").classList.add("hidden")
  document.getElementById("casePage").classList.remove("hidden")

  document.getElementById("caseTitle").textContent = caseData.name
  updateOpenButton()

  renderPrizeScroll(caseData)
  renderPossiblePrizes(caseData)
}

function renderPrizeScroll(caseData) {
  const prizeScroll = document.getElementById("prizeScroll")
  prizeScroll.innerHTML = ""

  const possibleRewards = caseData.possible_rewards

  for (let i = 0; i < 30; i++) {
    const randomReward = possibleRewards[Math.floor(Math.random() * possibleRewards.length)]
    const prizeElement = document.createElement("div")

    let colorClass = "bg-gradient-to-br from-gray-700 to-gray-900"
    if (randomReward.cost >= 5000) colorClass = "bg-gradient-to-br from-purple-600 to-purple-800"
    else if (randomReward.cost >= 2000) colorClass = "bg-gradient-to-br from-purple-700 to-purple-800"
    else if (randomReward.cost >= 1000) colorClass = "bg-gradient-to-br from-purple-800 to-purple-900"
    else if (randomReward.cost >= 500) colorClass = "bg-gradient-to-br from-gray-500 to-gray-700"

    prizeElement.className = `flex-shrink-0 w-20 h-20 ${colorClass} rounded-lg flex items-center justify-center text-white font-bold text-xs shadow-lg border border-white/20 transition-all duration-300`
    prizeElement.textContent = `${randomReward.cost} üíé`
    prizeScroll.appendChild(prizeElement)
  }
}

function renderPossiblePrizes(caseData) {
  const possiblePrizes = document.getElementById("possiblePrizes")
  possiblePrizes.innerHTML = ""

  caseData.possible_rewards.forEach((reward) => {
    const prizeElement = document.createElement("div")

    let colorClass = "bg-gradient-to-br from-gray-700 to-gray-900"
    if (reward.cost >= 5000) colorClass = "bg-gradient-to-br from-purple-600 to-purple-800"
    else if (reward.cost >= 2000) colorClass = "bg-gradient-to-br from-purple-700 to-purple-800"
    else if (reward.cost >= 1000) colorClass = "bg-gradient-to-br from-purple-800 to-purple-900"
    else if (reward.cost >= 500) colorClass = "bg-gradient-to-br from-gray-500 to-gray-700"

    prizeElement.className = `${colorClass} rounded-lg p-3 text-center text-white font-semibold text-sm shadow-lg border border-white/20`
    prizeElement.innerHTML = `
          <div class="font-bold">${reward.cost} üíé</div>
          <div class="text-xs opacity-75">${reward.probability}%</div>
      `
    possiblePrizes.appendChild(prizeElement)
  })
}

async function spinPrizes() {
  if (isSpinning) return

  const demoMode = document.getElementById("demoMode").checked

  if (!demoMode && userFantics < currentCase.cost) {
    showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤!", "error")
    return
  }

  isSpinning = true
  const prizeScroll = document.getElementById("prizeScroll")
  const openBtn = document.getElementById("openCaseBtn")

  openBtn.disabled = true
  openBtn.innerHTML = '<span class="animate-pulse">–û—Ç–∫—Ä—ã–≤–∞–µ–º...</span>'

  try {
    let result = null

    if (!demoMode) {
      result = await openCaseAPI(currentCase.id)
    } else {
      const possibleRewards = currentCase.possible_rewards
      const randomReward = possibleRewards[Math.floor(Math.random() * possibleRewards.length)]
      result = { gift: randomReward.cost }
    }

    // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã –¥–ª—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    renderPrizeScroll(currentCase)

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    prizeScroll.classList.add("prize-scroll")

    // –ñ–¥–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (3 —Å–µ–∫—É–Ω–¥—ã)
    setTimeout(() => {
      prizeScroll.classList.remove("prize-scroll")

      // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø—Ä–∏–∑ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      const centerPrize = prizeScroll.children[Math.floor(prizeScroll.children.length / 2)]
      if (centerPrize) {
        centerPrize.textContent = `${result.gift} üíé`
        centerPrize.classList.add("winning-prize")
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –µ—Å–ª–∏ –Ω–µ –¥–µ–º–æ —Ä–µ–∂–∏–º
      if (!demoMode) {
        const delay = API_BASE.includes("localhost") ? 1000 : 3000
        setTimeout(() => {
          fetchUserFantics()
          renderCases()
        }, delay)
      }

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
      setTimeout(() => {
        const profit = result.profit || 0
        const profitText = profit > 0 ? `(+${profit} üíé)` : profit < 0 ? `(${profit} üíé)` : ""

        showNotification(`üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏: ${result.gift} üíé ${profitText}`, "success", 5000)

        // –£–±–∏—Ä–∞–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        if (centerPrize) {
          centerPrize.classList.remove("winning-prize")
        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        openBtn.disabled = false
        updateOpenButton()
        isSpinning = false
      }, 1000)
    }, 3000) // –í—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
  } catch (error) {
    showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, "error")

    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    openBtn.disabled = false
    updateOpenButton()
    isSpinning = false
  }
}

function goBack() {
  document.getElementById("casePage").classList.add("hidden")
  document.getElementById("mainPage").classList.remove("hidden")
  currentCase = null
}

// Event listeners
document.getElementById("backBtn").addEventListener("click", goBack)
document.getElementById("openCaseBtn").addEventListener("click", spinPrizes)
document.getElementById("demoMode").addEventListener("change", updateOpenButton)

// Deposit modal event listeners
document.getElementById("depositBtn").addEventListener("click", openDepositModal)
document.getElementById("closeDepositModal").addEventListener("click", closeDepositModal)
document.getElementById("confirmDepositBtn").addEventListener("click", processDeposit)

document.getElementById("customAmount").addEventListener("input", () => {
  selectedDepositAmount = null
  document.querySelectorAll("#depositAmounts > div").forEach((el) => {
    el.classList.remove("selected-amount", "ring-2", "ring-purple-400")
  })
  updateDepositButton()
})

document.getElementById("depositModal").addEventListener("click", (e) => {
  if (e.target.id === "depositModal") {
    closeDepositModal()
  }
})

async function initApp() {
  console.log("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
  console.log("API URL:", API_BASE)
  console.log("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞:", isAuthAvailable() ? "‚úÖ –î–∞" : "‚ùå –ù–µ—Ç")

  if (window.Telegram?.WebApp?.initData) {
    console.log("üì± Init Data –¥–ª–∏–Ω–∞:", window.Telegram.WebApp.initData.length)
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const initData = window.Telegram.WebApp.initData
    console.log("üì± Init Data preview:", initData.substring(0, 50) + "..." + initData.substring(initData.length - 50))
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (!isAuthAvailable()) {
    showNotification("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –≤ Telegram", "info", 8000)
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
  if (window.location.search.includes("debug=true")) {
    await testConnection()
  }

  showConnectionStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
  await fetchUserFantics()
  await fetchCases()

  console.log("‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!")
}

initApp()
