// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API)
import { CONFIG, STATE } from "./config.js"

export function debugLog(message) {
  console.log(message)
  const debugLog = document.getElementById("debugLog")
  if (debugLog) {
    const timestamp = new Date().toLocaleTimeString()
    debugLog.innerHTML += `<div>[${timestamp}] ${message}</div>`
    debugLog.scrollTop = debugLog.scrollHeight
  }
}

export function showNotification(message, type = "info", duration = CONFIG.ANIMATION.NOTIFICATION_DURATION) {
  const notification = document.createElement("div")
  notification.className = `fixed top-4 right-4 z-50 px-4 py-3 rounded-lg shadow-lg max-w-sm transform transition-all duration-300 translate-x-full`

  const typeClasses = {
    success: "bg-green-500 text-white",
    error: "bg-red-500 text-white",
    warning: "bg-yellow-500 text-white",
    info: "bg-blue-500 text-white",
  }

  notification.className += ` ${typeClasses[type] || typeClasses.info}`
  notification.textContent = message
  document.body.appendChild(notification)

  // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
  setTimeout(() => {
    notification.classList.remove("translate-x-full")
  }, 100)

  // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
  setTimeout(() => {
    notification.classList.add("translate-x-full")
    setTimeout(() => {
      if (notification.parentNode) {
        notification.parentNode.removeChild(notification)
      }
    }, 300)
  }, duration)
}

export function showConnectionStatus(message, isError = false) {
  const statusDiv = document.getElementById("connectionStatus")
  const statusText = document.getElementById("statusText")

  if (statusDiv && statusText) {
    statusDiv.classList.remove("hidden")
    statusText.textContent = message

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–∞
    statusDiv.className = statusDiv.className.replace(/bg-(red|green|blue)-500/g, "")

    const statusClass = isError ? "bg-red-500" : "bg-green-500"
    statusDiv.className += ` ${statusClass}`
  }
}

export function updateFanticsDisplay() {
  const userStarsElements = document.querySelectorAll("#userStars, #userStarsCase, #modalUserStars")
  userStarsElements.forEach((element) => {
    if (element) {
      element.textContent = STATE.userFantics
    }
  })
}

export function renderCases(cases, onCaseSelect) {
  const casesGrid = document.getElementById("casesGrid")
  if (!casesGrid) return

  casesGrid.innerHTML = ""

  cases.forEach((caseData) => {
    const caseElement = document.createElement("div")
    caseElement.className =
      "bg-gradient-to-br from-purple-600 to-purple-800 rounded-lg p-4 text-white shadow-lg border border-purple-500/30 cursor-pointer hover:from-purple-700 hover:to-purple-900 transition-all transform hover:scale-105"

    caseElement.innerHTML = `
      <div class="text-center">
        <div class="text-4xl mb-2">${caseData.icon || "üì¶"}</div>
        <h3 class="font-bold text-lg mb-2">${caseData.name}</h3>
        <div class="flex items-center justify-center gap-2">
          <span class="text-purple-300">${caseData.cost}</span>
          <span class="text-xl">üíé</span>
        </div>
      </div>
    `

    caseElement.addEventListener("click", () => onCaseSelect(caseData))
    casesGrid.appendChild(caseElement)
  })
}

export function renderPossiblePrizes(caseData) {
  const possiblePrizes = document.getElementById("possiblePrizes")
  if (!possiblePrizes) return

  // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –ø–æ–¥ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö
  let prizes = []

  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º possible_prizes (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (caseData.possible_prizes && caseData.possible_prizes.length) {
    prizes = caseData.possible_prizes
  }
  // –ó–∞—Ç–µ–º –ø—Ä–æ–±—É–µ–º presents (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
  else if (caseData.presents && caseData.presents.length) {
    prizes = caseData.presents.map((present) => ({
      name: `${present.cost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`,
      cost: present.cost,
      icon: "üíé",
      probability: present.probability || 10,
      chance: present.probability || 10,
    }))
  }
  // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑—ã
  else {
    prizes = generateDefaultPrizesForDisplay(caseData.cost)
  }

  if (!prizes.length) return

  possiblePrizes.innerHTML = ""

  prizes.forEach((prize, index) => {
    const prizeElement = document.createElement("div")

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–∑–∞
    let bgGradient = "from-green-600 to-green-800" // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–µ–ª–µ–Ω—ã–π

    if (prize.cost >= 2000) {
      bgGradient = "from-yellow-600 to-yellow-800" // –ó–æ–ª–æ—Ç–æ–π –¥–ª—è –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–∏—Ö
    } else if (prize.cost >= 1000) {
      bgGradient = "from-purple-600 to-purple-800" // –§–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –¥–æ—Ä–æ–≥–∏—Ö
    } else if (prize.cost >= 200) {
      bgGradient = "from-blue-600 to-blue-800" // –°–∏–Ω–∏–π –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö
    }

    prizeElement.className = `bg-gradient-to-br ${bgGradient} rounded-lg p-3 text-white text-center shadow-lg border border-purple-500/30 hover:scale-105 transition-all duration-300`

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–Ω—Å–∞
    const chance = prize.chance || prize.probability || 0
    const chanceText = chance > 0 ? `${chance}%` : "–†–µ–¥–∫–∏–π"

    prizeElement.innerHTML = `
      <div class="text-2xl mb-1">${prize.icon || "üíé"}</div>
      <div class="text-xs font-semibold">${prize.name || `${prize.cost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`}</div>
      <div class="text-xs text-gray-300 mt-1">${chanceText}</div>
    `

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–∑–∞
    prizeElement.style.animationDelay = `${index * 0.1}s`

    possiblePrizes.appendChild(prizeElement)
  })
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–∑–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
function generateDefaultPrizesForDisplay(caseCost) {
  if (caseCost <= 100) {
    return [
      { name: "50 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 50, icon: "üíé", chance: 40 },
      { name: "100 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 100, icon: "üíé", chance: 35 },
      { name: "200 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 200, icon: "üíé", chance: 20 },
      { name: "500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 500, icon: "üíé", chance: 5 },
    ]
  } else if (caseCost <= 500) {
    return [
      { name: "200 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 200, icon: "üíé", chance: 30 },
      { name: "500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 500, icon: "üíé", chance: 35 },
      { name: "1000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 1000, icon: "üíé", chance: 25 },
      { name: "2500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 2500, icon: "üíé", chance: 10 },
    ]
  } else {
    return [
      { name: "1000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 1000, icon: "üíé", chance: 25 },
      { name: "2000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 2000, icon: "üíé", chance: 35 },
      { name: "5000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 5000, icon: "üíé", chance: 30 },
      { name: "10000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 10000, icon: "üíé", chance: 10 },
    ]
  }
}
