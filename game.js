// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API)
import { CONFIG, STATE } from "./config.js"
import { apiManager } from "./api.js"
import { showNotification, updateFanticsDisplay, renderPossiblePrizes } from "./ui.js"

export class GameManager {
  constructor() {
    this.setupEventListeners()
  }

  setupEventListeners() {
    document.getElementById("backBtn")?.addEventListener("click", () => this.goBack())
    document.getElementById("openCaseBtn")?.addEventListener("click", () => this.spinPrizes())
    document.getElementById("demoMode")?.addEventListener("change", () => this.updateOpenButton())
  }

  renderPrizeScroll(caseData, winningGiftCost = 0) {
    const prizeScroll = document.getElementById("prizeScroll")
    if (!prizeScroll || !caseData) return

    prizeScroll.innerHTML = ""

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º—Å—è –ø–æ–¥ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º presents –µ—Å–ª–∏ –Ω–µ—Ç possible_prizes
    let possiblePrizes = caseData.possible_prizes || []

    // –ï—Å–ª–∏ –Ω–µ—Ç possible_prizes, —Å–æ–∑–¥–∞–µ–º –∏—Ö –∏–∑ presents (—Å–µ—Ä–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
    if (!possiblePrizes.length && caseData.presents) {
      possiblePrizes = caseData.presents.map((present) => ({
        name: `${present.cost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`,
        cost: present.cost,
        icon: "üíé",
        probability: present.probability || 10,
        chance: present.probability || 10,
      }))
    }

    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∏–∑—ã
    if (!possiblePrizes.length) {
      possiblePrizes = this.generateDefaultPrizes(caseData.cost)
    }

    const prizes = []

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    possiblePrizes.forEach((prize) => {
      const probability = prize.chance || prize.probability || 10
      const weight = Math.max(1, Math.floor(probability))

      for (let i = 0; i < weight; i++) {
        prizes.push({
          name: prize.name || `${prize.cost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`,
          cost: prize.cost || 0,
          icon: prize.icon || "üíé",
        })
      }
    })

    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø—Ä–∏–∑—ã
    for (let i = prizes.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      ;[prizes[i], prizes[j]] = [prizes[j], prizes[i]]
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
    const extendedPrizes = [...prizes, ...prizes, ...prizes]

    extendedPrizes.forEach((prize, index) => {
      const prizeElement = document.createElement("div")
      prizeElement.className =
        "flex-shrink-0 w-32 h-32 bg-gradient-to-br from-purple-600 to-purple-800 rounded-lg flex flex-col items-center justify-center text-white shadow-lg border border-purple-500/30 transition-all duration-300"

      // –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      prizeElement.dataset.prizeName = prize.name
      prizeElement.dataset.prizeCost = prize.cost
      prizeElement.dataset.index = index

      const iconElement = document.createElement("div")
      iconElement.className = "text-3xl mb-2"
      iconElement.textContent = prize.icon

      const nameElement = document.createElement("div")
      nameElement.className = "text-sm font-semibold text-center px-1"
      nameElement.textContent = prize.name

      const costElement = document.createElement("div")
      costElement.className = "text-xs text-purple-300"
      costElement.textContent = `${prize.cost} üíé`

      prizeElement.appendChild(iconElement)
      prizeElement.appendChild(nameElement)
      prizeElement.appendChild(costElement)

      prizeScroll.appendChild(prizeElement)
    })
  }

  generateDefaultPrizes(caseCost) {
    if (caseCost <= 100) {
      return [
        { name: "50 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 50, icon: "üíé", chance: 40 },
        { name: "100 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 100, icon: "üíé", chance: 35 },
        { name: "200 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 200, icon: "üíé", chance: 20 },
        { name: "500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 500, icon: "üíé", chance: 5 },
      ]
    } else if (caseCost <= 500) {
      return [
        { name: "200 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 200, icon: "üíé", chance: 30 },
        { name: "500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 500, icon: "üíé", chance: 35 },
        { name: "1000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 1000, icon: "üíé", chance: 25 },
        { name: "2500 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 2500, icon: "üíé", chance: 10 },
      ]
    } else {
      return [
        { name: "1000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 1000, icon: "üíé", chance: 25 },
        { name: "2000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 2000, icon: "üíé", chance: 35 },
        { name: "5000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 5000, icon: "üíé", chance: 30 },
        { name: "10000 —Ñ–∞–Ω—Ç–∏–∫–æ–≤", cost: 10000, icon: "üíé", chance: 10 },
      ]
    }
  }

  updateOpenButton() {
    const openBtn = document.getElementById("openCaseBtn")
    const demoMode = document.getElementById("demoMode")
    const openBtnText = document.getElementById("openBtnText")

    if (!openBtn || !demoMode || !openBtnText) return

    if (demoMode.checked) {
      openBtn.disabled = false
      openBtnText.textContent = "–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (–î–µ–º–æ)"
      openBtn.className = openBtn.className.replace("bg-gray-500", "bg-purple-600")
    } else {
      const caseCost = STATE.currentCase?.cost || 0
      if (STATE.userFantics >= caseCost) {
        openBtn.disabled = false
        openBtnText.textContent = `–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (${caseCost} üíé)`
        openBtn.className = openBtn.className.replace("bg-gray-500", "bg-purple-600")
      } else {
        openBtn.disabled = true
        openBtnText.textContent = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤"
        openBtn.className = openBtn.className.replace("bg-purple-600", "bg-gray-500")
      }
    }
  }

  openCasePage(caseData) {
    STATE.currentCase = caseData
    document.getElementById("mainPage")?.classList.add("hidden")
    document.getElementById("casePage")?.classList.remove("hidden")

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –±–∞–ª–∞–Ω—Å
    const caseTitle = document.getElementById("caseTitle")
    const userStarsCase = document.getElementById("userStarsCase")

    if (caseTitle) caseTitle.textContent = caseData.name
    if (userStarsCase) userStarsCase.textContent = STATE.userFantics

    this.renderPrizeScroll(caseData)
    renderPossiblePrizes(caseData)
    this.updateOpenButton()
  }

  async spinPrizes() {
    if (STATE.isSpinning) return

    const openBtn = document.getElementById("openCaseBtn")
    const demoMode = document.getElementById("demoMode")

    if (!openBtn || !demoMode) return

    const caseCost = STATE.currentCase?.cost || 0

    if (!demoMode.checked && STATE.userFantics < caseCost) {
      showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞", "warning")
      return
    }

    STATE.isSpinning = true
    openBtn.disabled = true
    openBtn.classList.add("animate-pulse")

    try {
      let result

      if (demoMode.checked) {
        // –î–µ–º–æ —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = this.simulateDemoResult()
        showNotification("üéÆ –î–µ–º–æ —Ä–µ–∂–∏–º - –±–∞–ª–∞–Ω—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", "info", 2000)
      } else {
        // –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π API
        const serverResult = await apiManager.openCaseAPI(STATE.currentCase.id)
        if (!serverResult) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å ÔøΩÔøΩ–µ–π—Å")
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        STATE.userFantics = serverResult.new_balance || STATE.userFantics
        updateFanticsDisplay()

        // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
        result = this.adaptServerResponse(serverResult)
      }

      // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
      await this.animatePrizeScroll(result)

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      STATE.lastOpenedCase = result
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞", "error")
    } finally {
      openBtn.disabled = false
      openBtn.classList.remove("animate-pulse")
      this.updateOpenButton()
      STATE.isSpinning = false
    }
  }

  simulateDemoResult() {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–∑—ã –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–µ–π—Å–∞
    let possiblePrizes = STATE.currentCase.possible_prizes || []

    if (!possiblePrizes.length && STATE.currentCase.presents) {
      possiblePrizes = STATE.currentCase.presents.map((present) => ({
        name: `${present.cost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`,
        cost: present.cost,
        icon: "üíé",
      }))
    }

    if (!possiblePrizes.length) {
      possiblePrizes = this.generateDefaultPrizes(STATE.currentCase.cost)
    }

    const randomPrize = possiblePrizes[Math.floor(Math.random() * possiblePrizes.length)]

    return {
      prize: randomPrize,
      new_balance: STATE.userFantics,
      spent: 0,
      profit: randomPrize?.cost || 0,
    }
  }

  adaptServerResponse(serverResult) {
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
    // –°–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç: { gift, case_id, spent, profit, new_balance, message }
    return {
      prize: {
        name: `${serverResult.gift} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`,
        cost: serverResult.gift || 0,
        icon: "üíé",
      },
      new_balance: serverResult.new_balance,
      spent: serverResult.spent || 0,
      profit: serverResult.profit || 0,
      message: serverResult.message,
    }
  }

  async animatePrizeScroll(result) {
    const prizeScroll = document.getElementById("prizeScroll")
    if (!prizeScroll || !result?.prize) return

    const containerWidth = prizeScroll.parentElement.offsetWidth
    const prizeWidth = CONFIG.ANIMATION.PRIZE_WIDTH
    const centerOffset = containerWidth / 2 - prizeWidth / 2

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–∏–∑ –≤ —Å–∫—Ä–æ–ª–ª–µ
    const prizeElements = Array.from(prizeScroll.children)
    let targetIndex = Math.floor(prizeElements.length / 2) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ü–µ–Ω—Ç—Ä

    // –ò—â–µ–º –ø—Ä–∏–∑ —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    const foundIndex = prizeElements.findIndex((element) => {
      const elementName = element.dataset.prizeName
      const elementCost = Number.parseInt(element.dataset.prizeCost)
      return elementName === result.prize.name || elementCost === result.prize.cost
    })

    if (foundIndex !== -1) {
      targetIndex = foundIndex
    }

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    const targetPosition = targetIndex * prizeWidth - centerOffset

    return new Promise((resolve) => {
      const startTime = performance.now()
      const duration = CONFIG.ANIMATION.SPIN_DURATION
      const startPosition = prizeScroll.scrollLeft

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏
      const extraSpins =
        Math.random() * (CONFIG.GAME.MAX_SPIN_ROUNDS - CONFIG.GAME.MIN_SPIN_ROUNDS) + CONFIG.GAME.MIN_SPIN_ROUNDS
      const scrollWidth = prizeScroll.scrollWidth / 3 // –î–µ–ª–∏–º –Ω–∞ 3, —Ç–∞–∫ –∫–∞–∫ —É –Ω–∞—Å 3 –∫–æ–ø–∏–∏ –ø—Ä–∏–∑–æ–≤
      const totalDistance = targetPosition - startPosition + extraSpins * scrollWidth

      const animateScroll = (currentTime) => {
        const elapsed = currentTime - startTime
        const progress = Math.min(elapsed / duration, 1)

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        const easeOut = CONFIG.ANIMATION.EASING.EASE_IN_OUT_QUART(progress)
        const currentPosition = startPosition + totalDistance * easeOut

        prizeScroll.scrollLeft = currentPosition

        if (progress < 1) {
          requestAnimationFrame(animateScroll)
        } else {
          // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π –ø—Ä–∏–∑
          this.highlightWinningPrize(targetIndex)

          setTimeout(() => {
            const prizeName = result.prize?.name || "–ø—Ä–∏–∑"
            const prizeValue = result.prize?.cost || 0
            const profit = result.profit || 0

            let message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${prizeName}!`
            if (profit > 0) {
              message += ` –ü—Ä–∏–±—ã–ª—å: +${profit} üíé`
            } else if (profit < 0) {
              message += ` –£–±—ã—Ç–æ–∫: ${profit} üíé`
            }

            showNotification(message, "success", 5000)
            resolve()
          }, 500)
        }
      }

      requestAnimationFrame(animateScroll)
    })
  }

  highlightWinningPrize(index) {
    const prizeScroll = document.getElementById("prizeScroll")
    if (!prizeScroll) return

    const prizeElement = prizeScroll.children[index]
    if (prizeElement) {
      // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏
      Array.from(prizeScroll.children).forEach((el) => {
        el.classList.remove("prize-winner", "prize-highlight")
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–±–µ–¥—ã
      prizeElement.classList.add("prize-winner")

      // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        prizeElement.classList.remove("prize-winner")
      }, 3000)
    }
  }

  goBack() {
    document.getElementById("casePage")?.classList.add("hidden")
    document.getElementById("mainPage")?.classList.remove("hidden")
    STATE.currentCase = null
  }
}

export const gameManager = new GameManager()
