// –ú–æ–¥—É–ª—å –∏–≥—Ä–æ–≤–æ–π –ª–æ–≥–∏–∫–∏
import { STATE } from "./config.js"
import { apiManager } from "./api.js"
import { showNotification, updateFanticsDisplay, renderPossiblePrizes } from "./ui.js"

export class GameManager {
  constructor() {
    this.setupEventListeners()
  }

  setupEventListeners() {
    document.getElementById("backBtn")?.addEventListener("click", () => this.goBack())
    document.getElementById("openCaseBtn")?.addEventListener("click", () => this.spinPrizes())
    document.getElementById("demoMode")?.addEventListener("change", () => this.updateOpenButton())
  }

  renderPrizeScroll(caseData, winningGiftCost) {
    const prizeScroll = document.getElementById("prizeScroll")
    if (!prizeScroll || !caseData) return

    prizeScroll.innerHTML = ""

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–∏–∑–æ–≤ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ (–±–æ–ª—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏)
    const prizes = []
    const baseRepeats = 50 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π

    if (caseData.possible_prizes) {
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–æ–≤
      const basePrizes = []
      caseData.possible_prizes.forEach((prize) => {
        const repeats = Math.max(1, Math.floor(prize.chance / 2)) // –ú–µ–Ω—å—à–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        for (let i = 0; i < repeats; i++) {
          basePrizes.push(prize)
        }
      })

      // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä
      for (let i = basePrizes.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1))
        ;[basePrizes[i], basePrizes[j]] = [basePrizes[j], basePrizes[i]]
      }

      // –°–æ–∑–¥–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
      for (let i = 0; i < baseRepeats; i++) {
        basePrizes.forEach((prize) => prizes.push({ ...prize }))
      }
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–∏–∑—ã
    prizes.forEach((prize, index) => {
      const prizeElement = document.createElement("div")

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      let bgGradient = "from-purple-600 to-purple-800"
      if (prize.cost >= 2000) {
        bgGradient = "from-yellow-600 to-yellow-800"
      } else if (prize.cost >= 1000) {
        bgGradient = "from-purple-600 to-purple-800"
      } else if (prize.cost >= 200) {
        bgGradient = "from-blue-600 to-blue-800"
      } else {
        bgGradient = "from-green-600 to-green-800"
      }

      prizeElement.className = `flex-shrink-0 w-32 h-32 bg-gradient-to-br ${bgGradient} rounded-lg flex flex-col items-center justify-center text-white shadow-lg border border-purple-500/30`
      prizeElement.dataset.prizeIndex = index
      prizeElement.dataset.prizeCost = prize.cost

      const iconElement = document.createElement("div")
      iconElement.className = "text-3xl mb-2"
      iconElement.textContent = prize.icon || "üíé"

      const nameElement = document.createElement("div")
      nameElement.className = "text-sm font-semibold text-center"
      nameElement.textContent = prize.name

      const costElement = document.createElement("div")
      costElement.className = "text-xs text-purple-300"
      costElement.textContent = `${prize.cost} üíé`

      prizeElement.appendChild(iconElement)
      prizeElement.appendChild(nameElement)
      prizeElement.appendChild(costElement)

      prizeScroll.appendChild(prizeElement)
    })

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    prizeScroll.scrollLeft = 0
  }

  updateOpenButton() {
    const openBtn = document.getElementById("openCaseBtn")
    const demoMode = document.getElementById("demoMode")
    const openBtnText = document.getElementById("openBtnText")

    if (!openBtn || !demoMode || !openBtnText) return

    if (demoMode.checked) {
      openBtn.disabled = false
      openBtnText.textContent = "–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (–î–µ–º–æ)"
    } else {
      if (STATE.userFantics >= (STATE.currentCase?.cost || 0)) {
        openBtn.disabled = false
        openBtnText.textContent = `–û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å (${STATE.currentCase?.cost || 0} üíé)`
      } else {
        openBtn.disabled = true
        openBtnText.textContent = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤"
      }
    }
  }

  openCasePage(caseData) {
    STATE.currentCase = caseData
    document.getElementById("mainPage")?.classList.add("hidden")
    document.getElementById("casePage")?.classList.remove("hidden")

    document.getElementById("caseTitle").textContent = caseData.name
    document.getElementById("userStarsCase").textContent = STATE.userFantics

    this.renderPrizeScroll(caseData, 0)
    renderPossiblePrizes(caseData)
    this.updateOpenButton()
  }

  async spinPrizes() {
    if (STATE.isSpinning) return

    const openBtn = document.getElementById("openCaseBtn")
    const demoMode = document.getElementById("demoMode")

    if (!openBtn || !demoMode) return

    if (!demoMode.checked && STATE.userFantics < (STATE.currentCase?.cost || 0)) {
      showNotification("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–Ω—Ç–∏–∫–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞", "warning")
      return
    }

    STATE.isSpinning = true
    openBtn.disabled = true
    openBtn.classList.add("animate-pulse")

    try {
      let result

      if (demoMode.checked) {
        // –î–µ–º–æ —Ä–µ–∂–∏–º - —Å–∏–º—É–ª–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const prizes = STATE.currentCase.possible_prizes || []
        const randomPrize = prizes[Math.floor(Math.random() * prizes.length)]
        result = {
          gift: randomPrize.cost,
          prize: randomPrize,
          new_balance: STATE.userFantics,
          message: "–î–µ–º–æ —Ä–µ–∂–∏–º",
        }
      } else {
        // –†–µ–∞–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
        result = await apiManager.openCaseAPI(STATE.currentCase.id)
        if (!result) {
          throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å")
        }
        STATE.userFantics = result.new_balance || STATE.userFantics
        updateFanticsDisplay()
      }

      // –ê–Ω–∏–º–∞—Ü–∏—è –≤—Ä–∞—â–µ–Ω–∏—è
      await this.animatePrizeScroll(result)
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞:", error)
      showNotification("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞", "error")
    } finally {
      openBtn.disabled = false
      openBtn.classList.remove("animate-pulse")
      this.updateOpenButton()
      STATE.isSpinning = false
    }
  }

  async animatePrizeScroll(result) {
    const prizeScroll = document.getElementById("prizeScroll")
    if (!prizeScroll) return

    const prizeElements = Array.from(prizeScroll.children)
    const prizeWidth = 128 + 16 // 128px —à–∏—Ä–∏–Ω–∞ + 16px gap
    const containerWidth = prizeScroll.parentElement.offsetWidth
    const centerOffset = containerWidth / 2 - 64 // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å–µ—Ä–µ–¥–∏–Ω—ã –ø—Ä–∏–∑–∞

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–∏–∑ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    let targetPrizeIndex = -1
    const winningCost = result.gift || result.prize?.cost

    if (winningCost) {
      // –ò—â–µ–º –ø—Ä–∏–∑—ã —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ—Ç–∏ —Å–ø–∏—Å–∫–∞
      const startSearchFrom = Math.floor(prizeElements.length * 0.7)

      for (let i = startSearchFrom; i < prizeElements.length; i++) {
        const prizeCost = Number.parseInt(prizeElements[i].dataset.prizeCost)
        if (prizeCost === winningCost) {
          targetPrizeIndex = i
          break
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–∏–∑, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≤ –∫–æ–Ω—Ü–µ
    if (targetPrizeIndex === -1) {
      targetPrizeIndex =
        Math.floor(prizeElements.length * 0.75) + Math.floor(Math.random() * Math.floor(prizeElements.length * 0.2))
    }

    // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    const targetPosition = targetPrizeIndex * prizeWidth - centerOffset

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ—Å—Ç–∏
    const extraSpins = 3
    const finalTargetPosition = targetPosition + extraSpins * prizeElements.length * prizeWidth

    return new Promise((resolve) => {
      const startTime = performance.now()
      const duration = 6000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ 6 —Å–µ–∫—É–Ω–¥
      const startPosition = prizeScroll.scrollLeft

      // –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–¥–ª–µ–Ω–∏—è (–±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–∞—è)
      const easeOutQuart = (t) => {
        return 1 - Math.pow(1 - t, 4)
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–µ–Ω—å –ø–ª–∞–≤–Ω–æ–≥–æ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
      const smoothEnd = (t) => {
        if (t < 0.8) {
          return easeOutQuart(t / 0.8) * 0.95
        } else {
          // –û—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–º–µ–¥–ª–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20%
          const endProgress = (t - 0.8) / 0.2
          return 0.95 + 0.05 * (1 - Math.pow(1 - endProgress, 6))
        }
      }

      const animateScroll = (currentTime) => {
        const elapsed = currentTime - startTime
        const progress = Math.min(elapsed / duration, 1)

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–º–µ–¥–ª–µ–Ω–∏—è
        const easedProgress = smoothEnd(progress)

        const currentPosition = startPosition + (finalTargetPosition - startPosition) * easedProgress
        prizeScroll.scrollLeft = currentPosition

        // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–≥–æ—Å—è –∫ —Ü–µ–Ω—Ç—Ä—É –ø—Ä–∏–∑–∞
        const currentCenterPosition = currentPosition + centerOffset
        const currentPrizeIndex = Math.round(currentCenterPosition / prizeWidth)

        // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
        prizeElements.forEach((el) => el.classList.remove("prize-highlight"))

        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∑ –≤ —Ü–µ–Ω—Ç—Ä–µ
        if (prizeElements[currentPrizeIndex]) {
          prizeElements[currentPrizeIndex].classList.add("prize-highlight")
        }

        if (progress < 1) {
          requestAnimationFrame(animateScroll)
        } else {
          // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–≥–æ –ø—Ä–∏–∑–∞
          prizeElements.forEach((el) => el.classList.remove("prize-highlight"))
          if (prizeElements[targetPrizeIndex]) {
            prizeElements[targetPrizeIndex].classList.add("prize-winner")
          }

          setTimeout(() => {
            const prizeName = result.prize?.name || `${winningCost} —Ñ–∞–Ω—Ç–∏–∫–æ–≤`
            resolve()
          }, 800)
        }
      }

      requestAnimationFrame(animateScroll)
    })
  }

  goBack() {
    document.getElementById("casePage")?.classList.add("hidden")
    document.getElementById("mainPage")?.classList.remove("hidden")
    STATE.currentCase = null
  }
}

export const gameManager = new GameManager()
